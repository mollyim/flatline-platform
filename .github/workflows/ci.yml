name: Continuous Integration

on:
  pull_request:
    paths:
      - 'flatline-whisper-service'
      - 'flatline-storage-service'
      - 'flatline-registration-service'
      - 'flatline-contact-discovery-service'
      - 'flatline-calling-service'
      - '.github/workflows/ci.yml'
  push:
    branches:
      - main
    paths:
      - 'flatline-whisper-service'
      - 'flatline-storage-service'
      - 'flatline-registration-service'
      - 'flatline-contact-discovery-service'
      - 'flatline-calling-service'
      - '.github/workflows/ci.yml'

env:
  DEFAULT_BRANCH: main

permissions:
  contents: read
  packages: write

jobs:
  whisper-service:
    name: Whisper Service
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    timeout-minutes: 20
    defaults:
      run:
        working-directory: flatline-whisper-service
    services:
      foundationdb0:
        # Should be the same as the client version or close behind.
        image: foundationdb/foundationdb:7.3.62
        options: --name foundationdb0
      foundationdb1:
        # Should be the same as the client version or close behind.
        image: foundationdb/foundationdb:7.3.62
        options: --name foundationdb1
    steps:
      - &install-git
        name: Install Git
        working-directory: /
        run: |
          apt update && apt install -y git
      - &checkout-sources
        name: Checkout Sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: "recursive"
      - &set-up-jdk-24
        name: Set up JDK 24
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: 'temurin'
          java-version: 24
          cache: 'maven'
        env:
          # Work around incorrect HOME in container runners.
          # Source: https://github.com/actions/setup-java/issues/356
          HOME: /root
      - name: Install Docker
        run: |
          apt update
          apt install -y ca-certificates curl
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt update && apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      - name: Configure FoundationDB
        run: |
          docker exec foundationdb0 /usr/bin/fdbcli --exec "configure new single memory"
          docker exec foundationdb1 /usr/bin/fdbcli --exec "configure new single memory"
      - name: Download FoundationDB Client
        run: |
          ./mvnw -e -B \
            clean prepare-package \
            -Pexclude-spam-filter \
            -DskipTests=true
          cp service/target/jib-extra/usr/lib/libfdb_c.x86_64.so /usr/lib/libfdb_c.x86_64.so
          ldconfig
      - name: Test
        # Tests for features disabled in the Flatline prototype are excluded.
        run: |
          ./mvnw -e -B \
            clean verify \
            -DfoundationDb.serviceContainerNamePrefix=foundationdb \
            -pl '!integration-tests' \
            -Dsurefire.failIfNoSpecifiedTests=false \
            -Dtest=\!org.whispersystems.textsecuregcm.controllers.VerificationControllerTest,\!org.whispersystems.textsecuregcm.controllers.SubscriptionControllerTest,\!org.whispersystems.textsecuregcm.registration.IdentityTokenCallCredentialsTest
      - &determine-container-image-tag
        name: Determine Container Image Tag
        id: tag
        run: |
          if [ "$GITHUB_REF_NAME" = "$DEFAULT_BRANCH" ]; then
            echo "tag=${DEFAULT_BRANCH}" >> $GITHUB_OUTPUT
            echo "extra-tags=latest" >> $GITHUB_OUTPUT
          else
            # Workflow only runs on the default branch and on PR branches.
            tag="pr-$(echo "$GITHUB_REF_NAME" | cut -d'/' -f1)"
            echo "tag=$tag" >> $GITHUB_OUTPUT
            echo "extra-tags=$tag" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          DEFAULT_BRANCH: ${{ env.DEFAULT_BRANCH }}
      - name: Build Container Image
        run: |
          ./mvnw -e -B \
            deploy \
            -Pexclude-spam-filter \
            -Denv=dev \
            -DskipTests \
            -Djib.goal=build \
            -Djib.to.image=ghcr.io/${{ github.repository_owner }}/flatline-whisper-service:${{ steps.tag.outputs.tag }} \
            -Djib.to.tags=${{ steps.tag.outputs.extra-tags }} \
            -Djib.to.auth.username=${{ github.token }} \
            -Djib.to.auth.password=${{ github.token }}

  storage-service:
    name: Storage Service
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    timeout-minutes: 20
    defaults:
      run:
        working-directory: flatline-storage-service
    steps:
      - *install-git
      - *checkout-sources
      - *set-up-jdk-24
      - *determine-container-image-tag
      - name: Test & Build Container Image
        run: |
          ./mvnw -e -B \
            clean package \
            -Pdocker-deploy \
            -Denv=dev \
            -Djib.goal=build \
            -Djib.to.image=ghcr.io/${{ github.repository_owner }}/flatline-storage-service:${{ steps.tag.outputs.tag }} \
            -Djib.to.tags=${{ steps.tag.outputs.extra-tags }} \
            -Djib.to.auth.username=${{ github.token }} \
            -Djib.to.auth.password=${{ github.token }}

  registration-service:
    name: Registration Service
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    timeout-minutes: 20
    defaults:
      run:
        working-directory: flatline-registration-service
    steps:
      - *install-git
      - *checkout-sources
      - *set-up-jdk-24
      - *determine-container-image-tag
      - name: Test & Build Container Image
        run: |
          ./mvnw -e -B \
            clean package \
            -Denv=dev \
            -Djib.goal=build \
            -Djib.to.image=ghcr.io/${{ github.repository_owner }}/flatline-registration-service:${{ steps.tag.outputs.tag }} \
            -Djib.to.tags=${{ steps.tag.outputs.extra-tags }} \
            -Djib.to.auth.username=${{ github.token }} \
            -Djib.to.auth.password=${{ github.token }}

  contact-discovery-service:
    name: Contact Discovery Service
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    defaults:
      run:
        working-directory: flatline-contact-discovery-service
    steps:
      - *checkout-sources
      - name: Set up JDK 24
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          distribution: 'temurin'
          java-version: 24
          cache: 'maven'
      - *determine-container-image-tag
      - name: Test
        # Tests for features disabled in the Flatline prototype are excluded.
        run: |
          ./mvnw -e -B \
            verify \
            -Dtest=\!org.signal.cdsi.enclave.**,\!org.signal.cdsi.IntegrationTest,\!org.signal.cdsi.JsonMapperInjectionIntegrationTest,\!org.signal.cdsi.limits.redis.RedisLeakyBucketRateLimiterIntegrationTest,\!org.signal.cdsi.util.ByteSizeValidatorTest
      - name: Build Container Image
        run: |
          ./mvnw -e -B \
            deploy \
            -Dpackaging=docker \
            -DskipTests \
            -Djib.to.image=ghcr.io/${{ github.repository_owner }}/flatline-contact-discovery-service:${{ steps.tag.outputs.tag }} \
            -Djib.to.tags=${{ steps.tag.outputs.extra-tags }} \
            -Djib.to.auth.username=${{ github.token }} \
            -Djib.to.auth.password=${{ github.token }}

  calling-service:
    name: Calling Service
    runs-on: ubuntu-22.04
    env:
      TARGET_CPU: skylake
    timeout-minutes: 20
    defaults:
      run:
        working-directory: flatline-calling-service
    steps:
      - *checkout-sources
      - *determine-container-image-tag
      - name: Build Container Image for Frontend
        run: |
          docker build . -f frontend/Dockerfile --build-arg rust_flags=-Ctarget-cpu=$TARGET_CPU -t calling-frontend
          docker tag calling-frontend "ghcr.io/${{ github.repository_owner }}/flatline-calling-service-frontend:${{ steps.tag.outputs.tag }}"
          docker tag calling-frontend "ghcr.io/${{ github.repository_owner }}/flatline-calling-service-frontend:${{ steps.tag.outputs.extra-tags }}"
          echo "${{ github.token }}" | docker login ghcr.io -u=${{ github.actor }} --password-stdin
          docker push --all-tags "ghcr.io/${{ github.repository_owner }}/flatline-calling-service-frontend"
      - name: Build Container Image for Backend
        run: |
          docker build . -f backend/Dockerfile --build-arg rust_flags=-Ctarget-cpu=$TARGET_CPU -t calling-backend
          docker tag calling-backend "ghcr.io/${{ github.repository_owner }}/flatline-calling-service-backend:${{ steps.tag.outputs.tag }}"
          docker tag calling-backend "ghcr.io/${{ github.repository_owner }}/flatline-calling-service-backend:${{ steps.tag.outputs.extra-tags }}"
          echo "${{ github.token }}" | docker login ghcr.io -u=${{ github.actor }} --password-stdin
          docker push --all-tags "ghcr.io/${{ github.repository_owner }}/flatline-calling-service-backend"

  helm:
    name: Helm Test Images
    needs:
      - whisper-service
      - storage-service
      - registration-service
      - contact-discovery-service
      - calling-service
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: v3.18.6

      - name: Install Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.x'
          check-latest: true

      - name: Set up Chart Testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Create KinD Cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0

      - name: Chart Test Install
        run: |
          # This job only runs on PR branches.
          tag="pr-$(echo "$GITHUB_REF_NAME" | cut -d'/' -f1)"
          ct install \
          --all \
          --helm-extra-args "--timeout 180s" \
          --helm-extra-set-args " \
            --set=traefikResources.enabled=false \
            --set=whisperService.image.tag=$tag \
            --set=storageService.image.tag=$tag \
            --set=registrationService.image.tag=$tag \
            --set=contactDiscoveryService.image.tag=$tag \
            --set=callingServiceFrontend.image.tag=$tag \
            --set=callingServiceBackend.image.tag=$tag"
